def es_seguro(tablero, fila, columna, N):
    # Verificar si no hay reinas en la misma columna
    for i in range(fila):
        if tablero[i] == columna or \
           tablero[i] - i == columna - fila or \
           tablero[i] + i == columna + fila:
            return False
    return True

def imprimir_tablero(tablero):
    for fila in range(len(tablero)):
        line = ""
        for columna in range(len(tablero)):
            if columna == tablero[fila]:
                line += "Q "
            else:
                line += ". "
        print(line)
    print("\n")

def resolver_n_reinas(tablero, fila, N):
    if fila == N:
        imprimir_tablero(tablero)
        return
    for columna in range(N):
        if es_seguro(tablero, fila, columna, N):
            tablero[fila] = columna
            resolver_n_reinas(tablero, fila + 1, N)
            tablero[fila] = -1  # backtrack

def n_reinas(N):
    tablero = [-1] * N
    resolver_n_reinas(tablero, 0, N)

n_reinas(8)

def verificar_soluciones(N):
    tablero = [-1] * N
    soluciones = []
    
    def verificar(tablero, fila, N):
        if fila == N:
            soluciones.append(tablero.copy())
            return
        for columna in range(N):
            if es_seguro(tablero, fila, columna, N):
                tablero[fila] = columna
                verificar(tablero, fila + 1, N)
                tablero[fila] = -1  # backtrack
    
    verificar(tablero, 0, N)
    
    for solucion in soluciones:
        for i in range(N):
            if not es_seguro(solucion, i, solucion[i], N):
                print("¡Error en la solución!")
                return
    print("Todas las soluciones son válidas.")

verificar_soluciones(8)
